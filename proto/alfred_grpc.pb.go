// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: proto/alfred.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Alfred_DownloadArtifact_FullMethodName = "/proto.Alfred/DownloadArtifact"
	Alfred_LoadImage_FullMethodName        = "/proto.Alfred/LoadImage"
	Alfred_ScheduleJob_FullMethodName      = "/proto.Alfred/ScheduleJob"
	Alfred_Ping_FullMethodName             = "/proto.Alfred/Ping"
	Alfred_WatchJob_FullMethodName         = "/proto.Alfred/WatchJob"
	Alfred_WatchJobs_FullMethodName        = "/proto.Alfred/WatchJobs"
)

// AlfredClient is the client API for Alfred service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlfredClient interface {
	DownloadArtifact(ctx context.Context, in *DownloadArtifactRequest, opts ...grpc.CallOption) (Alfred_DownloadArtifactClient, error)
	LoadImage(ctx context.Context, opts ...grpc.CallOption) (Alfred_LoadImageClient, error)
	ScheduleJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ScheduleJobResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (Alfred_WatchJobClient, error)
	WatchJobs(ctx context.Context, in *WatchJobsRequest, opts ...grpc.CallOption) (Alfred_WatchJobsClient, error)
}

type alfredClient struct {
	cc grpc.ClientConnInterface
}

func NewAlfredClient(cc grpc.ClientConnInterface) AlfredClient {
	return &alfredClient{cc}
}

func (c *alfredClient) DownloadArtifact(ctx context.Context, in *DownloadArtifactRequest, opts ...grpc.CallOption) (Alfred_DownloadArtifactClient, error) {
	stream, err := c.cc.NewStream(ctx, &Alfred_ServiceDesc.Streams[0], Alfred_DownloadArtifact_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &alfredDownloadArtifactClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Alfred_DownloadArtifactClient interface {
	Recv() (*DownloadArtifactChunk, error)
	grpc.ClientStream
}

type alfredDownloadArtifactClient struct {
	grpc.ClientStream
}

func (x *alfredDownloadArtifactClient) Recv() (*DownloadArtifactChunk, error) {
	m := new(DownloadArtifactChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alfredClient) LoadImage(ctx context.Context, opts ...grpc.CallOption) (Alfred_LoadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Alfred_ServiceDesc.Streams[1], Alfred_LoadImage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &alfredLoadImageClient{stream}
	return x, nil
}

type Alfred_LoadImageClient interface {
	Send(*LoadImageMessage) error
	Recv() (*LoadImageResponse, error)
	grpc.ClientStream
}

type alfredLoadImageClient struct {
	grpc.ClientStream
}

func (x *alfredLoadImageClient) Send(m *LoadImageMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *alfredLoadImageClient) Recv() (*LoadImageResponse, error) {
	m := new(LoadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alfredClient) ScheduleJob(ctx context.Context, in *ScheduleJobRequest, opts ...grpc.CallOption) (*ScheduleJobResponse, error) {
	out := new(ScheduleJobResponse)
	err := c.cc.Invoke(ctx, Alfred_ScheduleJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alfredClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Alfred_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alfredClient) WatchJob(ctx context.Context, in *WatchJobRequest, opts ...grpc.CallOption) (Alfred_WatchJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Alfred_ServiceDesc.Streams[2], Alfred_WatchJob_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &alfredWatchJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Alfred_WatchJobClient interface {
	Recv() (*JobStatus, error)
	grpc.ClientStream
}

type alfredWatchJobClient struct {
	grpc.ClientStream
}

func (x *alfredWatchJobClient) Recv() (*JobStatus, error) {
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *alfredClient) WatchJobs(ctx context.Context, in *WatchJobsRequest, opts ...grpc.CallOption) (Alfred_WatchJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Alfred_ServiceDesc.Streams[3], Alfred_WatchJobs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &alfredWatchJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Alfred_WatchJobsClient interface {
	Recv() (*JobsList, error)
	grpc.ClientStream
}

type alfredWatchJobsClient struct {
	grpc.ClientStream
}

func (x *alfredWatchJobsClient) Recv() (*JobsList, error) {
	m := new(JobsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlfredServer is the server API for Alfred service.
// All implementations must embed UnimplementedAlfredServer
// for forward compatibility
type AlfredServer interface {
	DownloadArtifact(*DownloadArtifactRequest, Alfred_DownloadArtifactServer) error
	LoadImage(Alfred_LoadImageServer) error
	ScheduleJob(context.Context, *ScheduleJobRequest) (*ScheduleJobResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	WatchJob(*WatchJobRequest, Alfred_WatchJobServer) error
	WatchJobs(*WatchJobsRequest, Alfred_WatchJobsServer) error
	mustEmbedUnimplementedAlfredServer()
}

// UnimplementedAlfredServer must be embedded to have forward compatible implementations.
type UnimplementedAlfredServer struct {
}

func (UnimplementedAlfredServer) DownloadArtifact(*DownloadArtifactRequest, Alfred_DownloadArtifactServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadArtifact not implemented")
}
func (UnimplementedAlfredServer) LoadImage(Alfred_LoadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadImage not implemented")
}
func (UnimplementedAlfredServer) ScheduleJob(context.Context, *ScheduleJobRequest) (*ScheduleJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleJob not implemented")
}
func (UnimplementedAlfredServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAlfredServer) WatchJob(*WatchJobRequest, Alfred_WatchJobServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJob not implemented")
}
func (UnimplementedAlfredServer) WatchJobs(*WatchJobsRequest, Alfred_WatchJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJobs not implemented")
}
func (UnimplementedAlfredServer) mustEmbedUnimplementedAlfredServer() {}

// UnsafeAlfredServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlfredServer will
// result in compilation errors.
type UnsafeAlfredServer interface {
	mustEmbedUnimplementedAlfredServer()
}

func RegisterAlfredServer(s grpc.ServiceRegistrar, srv AlfredServer) {
	s.RegisterService(&Alfred_ServiceDesc, srv)
}

func _Alfred_DownloadArtifact_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadArtifactRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlfredServer).DownloadArtifact(m, &alfredDownloadArtifactServer{stream})
}

type Alfred_DownloadArtifactServer interface {
	Send(*DownloadArtifactChunk) error
	grpc.ServerStream
}

type alfredDownloadArtifactServer struct {
	grpc.ServerStream
}

func (x *alfredDownloadArtifactServer) Send(m *DownloadArtifactChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Alfred_LoadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AlfredServer).LoadImage(&alfredLoadImageServer{stream})
}

type Alfred_LoadImageServer interface {
	Send(*LoadImageResponse) error
	Recv() (*LoadImageMessage, error)
	grpc.ServerStream
}

type alfredLoadImageServer struct {
	grpc.ServerStream
}

func (x *alfredLoadImageServer) Send(m *LoadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *alfredLoadImageServer) Recv() (*LoadImageMessage, error) {
	m := new(LoadImageMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Alfred_ScheduleJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlfredServer).ScheduleJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alfred_ScheduleJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlfredServer).ScheduleJob(ctx, req.(*ScheduleJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alfred_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlfredServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alfred_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlfredServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alfred_WatchJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlfredServer).WatchJob(m, &alfredWatchJobServer{stream})
}

type Alfred_WatchJobServer interface {
	Send(*JobStatus) error
	grpc.ServerStream
}

type alfredWatchJobServer struct {
	grpc.ServerStream
}

func (x *alfredWatchJobServer) Send(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Alfred_WatchJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlfredServer).WatchJobs(m, &alfredWatchJobsServer{stream})
}

type Alfred_WatchJobsServer interface {
	Send(*JobsList) error
	grpc.ServerStream
}

type alfredWatchJobsServer struct {
	grpc.ServerStream
}

func (x *alfredWatchJobsServer) Send(m *JobsList) error {
	return x.ServerStream.SendMsg(m)
}

// Alfred_ServiceDesc is the grpc.ServiceDesc for Alfred service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alfred_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Alfred",
	HandlerType: (*AlfredServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleJob",
			Handler:    _Alfred_ScheduleJob_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Alfred_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadArtifact",
			Handler:       _Alfred_DownloadArtifact_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadImage",
			Handler:       _Alfred_LoadImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchJob",
			Handler:       _Alfred_WatchJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchJobs",
			Handler:       _Alfred_WatchJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/alfred.proto",
}
